{%- set name = "resnet-cifar-ps-strategy-example" -%}
{%- set image = "gcr.io/tensorflow-experimental/resnet_cifar_ps_strategy:v1" -%}
{%- set worker_replicas = 5 -%}
{%- set ps_replicas = 2 -%}
{%- set num_gpus_per_worker = 0 -%}
{%- set has_coordinator = True -%}
{%- set has_eval = False -%}
{%- set has_tensorboard = True -%}
{%- set script = "/resnet_cifar_ps_strategy.py" -%}
{%- set train_log_dir = "gs://cifar10-train-log/" -%}
{%- set cmdline_args = [
    "--data_dir=gs://cifar10-data/", 
    "--checkpoint_dir=gs://cifar10-ckpt/",
    "--train_log_dir=" + train_log_dir
  ] -%}
{%- set credential_secret_json = "key.json" -%}
{%- set credential_secret_key = "credential" -%}
{%- set port = 5000 -%}
{%- set use_node_port = True -%}


{%- set replicas = {
    "worker": worker_replicas,
    "ps": ps_replicas,
    "chief": has_coordinator|int,
    "evaluator": has_eval|int,
    "tensorboard": has_tensorboard|int
  } -%}

{%- macro worker_hosts() -%}
  {% for i in range(worker_replicas) %}
      \"{{ name }}-worker-{{ i }}:{{ port }}\"{%- if not loop.last -%},{%- endif -%}
  {% endfor %}
{%- endmacro -%}

{%- macro ps_hosts() -%}
  {% for i in range(ps_replicas) %}
      \"{{ name }}-ps-{{ i }}:{{ port }}\"{%- if not loop.last -%},{%- endif -%}
  {% endfor %}
{%- endmacro -%}

{%- macro tf_config(task_type, task_id) -%}
{
  \"cluster\": {
    \"worker\": [{{ worker_hosts() }}]
    {%- if ps_replicas > 0 %}, 
    \"ps\": [{{ ps_hosts() }}
    ]{% endif %}
    {%- if has_coordinator %},
    \"chief\": [
      \"{{ name }}-chief-0:{{ port }}\"
    ]
    {%- endif %}
  },
  \"task\": {
    \"type\": \"{{ task_type }}\",
    \"index\": \"{{ task_id }}\"
  }
}
{%- endmacro -%}

{% for job in ["chief", "worker", "ps", "evaluator", "tensorboard"] -%}
{%- for i in range(replicas[job]) -%}
{% if job == "tensorboard" and use_node_port %}
kind: Ingress
apiVersion: networking.k8s.io/v1beta1
metadata:
  name: tensorboard-ingress
spec:
  backend:
    serviceName: {{ name }}-{{ job }}-{{ i }}
    servicePort: {{ port }}
---
{% endif -%}
kind: Service
apiVersion: v1
metadata:
  name: {{ name }}-{{ job }}-{{ i }}
spec:
  type: {{ 'NodePort' if use_node_port else 'LoadBalancer' }}
  selector:
    name: {{ name }}
    job: {{ job }}
    task: "{{ i }}"
  ports:
  - port: {{ port }}
    {%- if use_node_port %}
    targetPort: {{ port }}
    {%- endif %}
---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: {{ name }}-{{ job }}-{{ i }}
spec:
  replicas: 1
  selector:
    matchLabels:
      name: {{ name }}
      job: {{ job }}
      task: "{{ i }}"
  template:
    metadata:
      labels:
        name: {{ name }}
        job: {{ job }}
        task: "{{ i }}"
    spec:
      containers:
{%- if job == "tensorboard" %}
      - name: tensorflow
        image: tensorflow/tensorflow
{%- else %}
      - name: tensorflow
        image: {{ image }}
{%- endif %}
        env:
{%- if job != "tensorboard" %}
        - name: TF_CONFIG
          value: "{{ tf_config(job, i) }}"
{%- endif %}
        - name: GOOGLE_APPLICATION_CREDENTIALS
          value: "/var/secrets/google/{{ credential_secret_json }}"
        ports:
        - containerPort: {{ port }}
{%- if job == "tensorboard" %}
        command:
        - "tensorboard"
        args:
        - "--logdir={{ train_log_dir }}"
        - "--port={{ port }}"
        - "--host=0.0.0.0"
{%- else %}
        command:
        - "python"
        - "{{ script }}"
        {%- for cmdline_arg in cmdline_args %}
        - "{{ cmdline_arg }}"
        {%- endfor -%}
{%- endif %}
        volumeMounts:
        - name: credential
          mountPath: /var/secrets/google
      volumes:
      - name: credential
        secret:
          secretName: {{ credential_secret_key }}
---
{% endfor %}
{%- endfor -%}
